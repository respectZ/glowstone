package component

// Code generated by scrapper/entityBp.ts;

import (
  f "github.com/respectZ/glowstone/bp/types"
)

// [Not a component] The list of entity definitions that this entity can breed with.
type BreedableBreedsWith struct {
  // The entity definition of this entity's babies.
  BabyType string `json:"baby_type,omitempty"`
  // Event to run when this entity breeds.
  BreedEvent string `json:"breed_event,omitempty"`
  // The entity definition of this entity's mate.
  MateType string `json:"mate_type,omitempty"`
}

// [Not a component] Determines how likely the baby of parents with the same variant will deny that variant and take a random variant within the given range instead.
type BreedableDenyParentsVariant struct {
  // The percentage chance of denying the parents' variant.
  Chance float64 `json:"chance,omitempty"`
  // The inclusive maximum of the variant range.
  MaxVariant int `json:"max_variant,omitempty"`
  // The inclusive minimum of the variant range.
  MinVariant int `json:"min_variant,omitempty"`
}

// [Not a component] Determines how likely the babies are to NOT inherit one of their parent's variances. Values are between 0.0 and 1.0, with a higher number meaning more likely to mutate.
type BreedableMutationFactor struct {
  // The percentage chance of a mutation on the entity's color.
  Color float64 `json:"color,omitempty"`
  // The percentage chance of a mutation on the entity's extra variant type.
  ExtraVariant float64 `json:"extra_variant,omitempty"`
  // The percentage chance of a mutation on the entity's variant type.
  Variant float64 `json:"variant,omitempty"`
}

// Defines the way an entity can get into the 'love' state.  
type Breedable struct {
  // If true, entities can breed while sitting
  AllowSitting bool `json:"allow_sitting,omitempty"`
  // If true, the entities will blend their attributes in the offspring after they breed.
  BlendAttributes bool `json:"blend_attributes,omitempty"`
  // Time in seconds before the Entity can breed again.
  BreedCooldown float64 `json:"breed_cooldown,omitempty"`
  // The list of items that can be used to get the entity into the 'love' state
  BreedItems []interface{} `json:"breed_items,omitempty"`
  // The list of entity definitions that this entity can breed with.
  BreedsWith []BreedableBreedsWith `json:"breeds_with,omitempty"`
  // If true, the entity will become pregnant instead of spawning a baby.
  CausesPregnancy bool `json:"causes_pregnancy,omitempty"`
  // Determines how likely the baby of parents with the same variant will deny that variant and take a random variant within the given range instead.
  DenyParentsVariant BreedableDenyParentsVariant `json:"deny_parents_variant,omitempty"`
  // The list of nearby block requirements to get the entity into the 'love' state.blocks#
  EnvironmentRequirements []interface{} `json:"environment_requirements,omitempty"`
  // Chance that up to 16 babies will spawn between 0.0 and 1.0, where 1.0 is 100%.
  ExtraBabyChance float64 `json:"extra_baby_chance,omitempty"`
  // If true, the babies will be automatically tamed if its parents are
  InheritTamed bool `json:"inherit_tamed,omitempty"`
  // The filters to run when attempting to fall in love.
  LoveFilters *f.Filter `json:"love_filters,omitempty"`
  // Determines how likely the babies are to NOT inherit one of their parent's variances. Values are between 0.0 and 1.0, with a higher number meaning more likely to mutate.
  MutationFactor BreedableMutationFactor `json:"mutation_factor,omitempty"`
  // Strategy used for mutating variants and extra variants for offspring. Current valid alternatives are 'random' and 'none'.
  MutationStrategy string `json:"mutation_strategy,omitempty"`
  //  [EXPERIMENTAL] List of attributes that should benefit from parent centric attribute blending. For example, horses blend their health, movement, and jump_strength in their offspring.
  ParentCentricAttributeBlending []interface{} `json:"parent_centric_attribute_blending,omitempty"`
  // Range used to determine random extra variant.
  RandomExtraVariantMutationInterval float64 `json:"random_extra_variant_mutation_interval,omitempty"`
  // Range used to determine random variant.
  RandomVariantMutationInterval float64 `json:"random_variant_mutation_interval,omitempty"`
  // If true, the entity needs to be at full health before it can breed.
  RequireFullHealth bool `json:"require_full_health,omitempty"`
  // If true, the entities need to be tamed first before they can breed.
  RequireTame bool `json:"require_tame,omitempty"`
  // The breed item used will transform to this item upon successful interaction. Format: itemName:auxValue
  TransformToItem string `json:"transform_to_item,omitempty"`
}

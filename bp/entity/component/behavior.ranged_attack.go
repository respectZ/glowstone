package component

// Code generated by scrapper/entityBp.ts;

// Allows an entity to attack by using ranged shots. "charge_shoot_trigger" must be greater than 0 to enable charged up burst-shot attacks. Requires minecraft:shooter to define projectile behaviour.  
type Behavior_RangedAttack struct {
  // Alternative to "attack_interval_min" & "attack_interval_max". Consistent reload-time (in seconds), when not using a charged shot. Does not scale with target-distance.
  AttackInterval float64 `json:"attack_interval,omitempty"`
  // Maximum bound for reload-time range (in seconds), when not using a charged shot. Reload-time range scales with target-distance.
  AttackIntervalMax float64 `json:"attack_interval_max,omitempty"`
  // Minimum bound for reload-time range (in seconds), when not using a charged shot. Reload-time range scales with target-distance.
  AttackIntervalMin float64 `json:"attack_interval_min,omitempty"`
  // Minimum distance to target before this entity will attempt to shoot.
  AttackRadius float64 `json:"attack_radius,omitempty"`
  // Minimum distance the target can be for this mob to fire. If the target is closer, this mob will move first before firing
  AttackRadiusMin float64 `json:"attack_radius_min,omitempty"`
  // Time (in seconds) between each individual shot when firing a burst of shots from a charged up attack.
  BurstInterval float64 `json:"burst_interval,omitempty"`
  // Number of shots fired every time the attacking entity uses a charged up attack.
  BurstShots *int `json:"burst_shots,omitempty"`
  // Time (in seconds, then add "charge_shoot_trigger"), before a charged up attack is done charging. Charge-time decays while target is not in sight.
  ChargeChargedTrigger float64 `json:"charge_charged_trigger,omitempty"`
  // Amount of time (in seconds, then doubled) a charged shot must be charging before reloading burst shots. Charge-time decays while target is not in sight.
  ChargeShootTrigger float64 `json:"charge_shoot_trigger,omitempty"`
  // Field of view (in degrees) when using sensing to detect a target for attack.
  RangedFov *float64 `json:"ranged_fov,omitempty"`
  // Allows the actor to be set to persist upon targeting a player
  SetPersistent bool `json:"set_persistent,omitempty"`
  // During attack behavior, this multiplier modifies the entity's speed when moving toward the target.
  SpeedMultiplier *float64 `json:"speed_multiplier,omitempty"`
  // If a swing animation (using variable.attack_time) exists, this causes the actor to swing their arm(s) upon firing the ranged attack.
  Swing bool `json:"swing,omitempty"`
  // Minimum amount of time (in seconds) the attacking entity needs to see the target before moving toward it.
  TargetInSightTime *float64 `json:"target_in_sight_time,omitempty"`
  // Maximum rotation (in degrees), on the X-axis, this entity can rotate while trying to look at the target.
  XMaxRotation *float64 `json:"x_max_rotation,omitempty"`
  // Maximum rotation (in degrees), on the Y-axis, this entity can rotate its head while trying to look at the target.
  YMaxHeadRotation *float64 `json:"y_max_head_rotation,omitempty"`
  // The priority of this behavior. Lower values are higher priority.
  Priority int `json:"priority,omitempty"`
}

package component

// Code generated by scrapper/entityBp.ts;

// Allows the entity follow another entity. Both entities must be swimming [ie, in water].  
type Behavior_SwimWithEntity struct {
  // The multiplier this entity's speed is modified by when matching another entity's direction.
  CatchUpMultiplier *float64 `json:"catch_up_multiplier,omitempty"`
  // Distance, from the entity being followed, at which this entity will speed up to reach that entity.
  CatchUpThreshold *float64 `json:"catch_up_threshold,omitempty"`
  // Percent chance to stop following the current entity, if they're riding another entity or they're not swimming. 1.0 = 100%
  ChanceToStop *float64 `json:"chance_to_stop,omitempty"`
  // Filters which types of entities are valid to follow.
  EntityTypes interface{} `json:"entity_types,omitempty"`
  // Distance, from the entity being followed, at which this entity will try to match that entity's direction
  MatchDirectionThreshold *float64 `json:"match_direction_threshold,omitempty"`
  // Radius around this entity to search for another entity to follow.
  SearchRange *float64 `json:"search_range,omitempty"`
  // The multiplier this entity's speed is modified by when trying to catch up to the entity being followed.
  SpeedMultiplier *float64 `json:"speed_multiplier,omitempty"`
  // Time (in seconds) between checks to determine if this entity should catch up to the entity being followed or match the direction of the entity being followed.
  StateCheckInterval *float64 `json:"state_check_interval,omitempty"`
  // Distance, from the entity being followed, at which this entity will stop following that entity.
  StopDistance *float64 `json:"stop_distance,omitempty"`
  // Percent chance to start following another entity, if not already doing so. 1.0 = 100%
  SuccessRate *float64 `json:"success_rate,omitempty"`
  // The priority of this behavior. Lower values are higher priority.
  Priority int `json:"priority,omitempty"`
}

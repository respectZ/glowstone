package component

// Code generated by scrapper/block.ts;

// Sets rules for under what conditions the block can be placed or survive. Experimental toggles required: Holiday Creator Features (in format versions before 1.19.60).
type PlacementFilter struct {
	// List of conditions where the block can be placed/survive. Limited to 64 conditions. Each condition is a JSON Object that must contain at least one (and can contain both)  of the parameters allowed_faces or  block_filter as shown below.
	Conditions []*PlacementFilterCondition `json:"conditions,omitempty"`
}

type PlacementFilterCondition struct {
	// List of any of the following strings describing which face(s) this block can be placed on: "up", "down", "north", "south", "east", "west", "side", "all". Limited to 6 faces.
	AllowedFaces []string `json:"allowed_faces,omitempty"`

	// List of blocks that this block can be placed against in the "allowed_faces" direction. Limited to 64 blocks. Each block in this list can either be specified as a String (block name) or as a BlockDescriptor. A BlockDescriptor is an object that allows you to reference a block (or multiple blocks) based on its tags, or based on its name and states. The fields of a BlockDescriptor are described below.
	BlockFilter []interface{} `json:"block_filter,omitempty"`
}

type PlacementFilterBlockDescriptor struct {
	// The name of a block.
	Name string `json:"name,omitempty"`

	// The list of Vanilla block states and their values that the block can have, expressed in key/value pairs.
	States []interface{} `json:"states,omitempty"`

	// A condition using Molang queries that results to true/false that can be used to query for blocks with certain tags.
	Tags string `json:"tags,omitempty"`
}
